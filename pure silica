import requests
import glob
from pymatgen.core.structure import Structure

# set the URL for the IZA CIF file download page
url = 'http://www.iza-structure.org/IZA-SC/cif/'

# define a list of zeolite codes to download
zeolite_codes = ['ABW', 'ACO', 'AEI', 'AEL', 'AEN', 'AET', 'AFG', 'AFI', 'AFN', 'AFO', 'AFR', 'AFS', 'AFT', 'AFV', 'AFX', 'AFY', 'AHT', 'ANA', 'ANO', 'APC', 'APD', 'AST', 'ASV', 'ATN', 'ATO', 'ATS', 'ATT', 'ATV', 'AVE', 'AVL' ,'AWO', 'AWW', 'BCT', 'BEC', 'BIK', 'BOF', 'BOG', 'BOZ', 'BPH', 'BRE' ,'BSV', 'CAN', 'CAS', 'CDO' ,'CFI' ,'CGF', 'CGS' ,'CHA', 'CHI', 'CLO', 'CON', 'CSV', 'CZP','DAC', 'DDR', 'DFO', 'DFT', 'DOH', 'DON' ,'EAB', 'EDI', 'EEI' ,'EMT', 'EON' ,'EPI', 'ERI', 'ESV', 'ETL', 'ETR', 'ETV', 'EUO', 'EWF', 'EWO', 'EWS', 'EWT', 'EZT', 'FAR', 'FAU', 'FER', 'FRA', 'GIS', 'GIU', 'GME', 'GON', 'GOO', 'HEU', 'HOS', 'IFO', 'IFR', 'IFT', 'IFU', 'IFW', 'IFY', 'IHW', 'IMF', 'IRN' ,'IRR', 'IRT', 'IRY', 'ISV' ,'ITE', 'ITG', 'ITH', 'ITR', 'ITT', 'ITV', 'ITW', 'IWR', 'IWS', 'IWV', 'IWW', 'JBW', 'JNT', 'JOZ', 'JRY', 'JSN', 'JSR', 'JST', 'JSW', 'JZO', 'KFI', 'LAU', 'LEV', 'LIO', 'LIT', 'LOS', 'LOV', 'LTA', 'LTF', 'LTJ', 'LTL', 'LTN', 'MAR', 'MAZ', 'MEI', 'MEL', 'MEP', 'MER', 'MFI', 'MFS', 'MON', 'MOR', 'MOZ', 'MRT', 'MSE', 'MSO', 'MTF', 'MTN', 'MTT', 'MTW', 'MVY', 'MWF', 'MWW', 'NAB', 'NAT', 'NES', 'NON', 'NPO', 'NPT', 'NSI', 'OBW', 'OFF', 'OKO', 'OSI', 'OSO', 'OWE', 'PAR', 'PAU', 'PCR', 'PHI', 'PON', 'POR', 'POS', 'PSI', 'PTF', 'PTO', 'PTT', 'PTY', 'PUN', 'PWN', 'PWO', 'PWW', 'RHO', 'RON', 'RRO', 'RSN', 'RTE', 'RTH', 'RUT', 'RWR', 'RWY', 'SAF', 'SAO', 'SAS', 'SAT', 'SAV', 'SBE', 'SBN' ,'SBS', 'SBT', 'SEW', 'SFE', 'SFF', 'SFG', 'SFH', 'SFN', 'SFO', 'SFS', 'SFW', 'SGT', 'SIV', 'SOD', 'SOF', 'SOR', 'SOS', 'SOV', 'SSF', 'SSO', 'SSY', 'STF', 'STI', 'STT', 'STW', 'SVR', 'SVV', 'SWY', 'SYT', 'SZR', 'TER', 'THO', 'TOL', 'TON', 'TSC', 'TUN', 'UEI', 'UFI', 'UOS', 'UOV', 'UOZ', 'USI', 'UTL', 'UWY', 'VET', 'VFI', 'VNI', 'VSV', 'WEI', 'WEN', 'YFI', 'YUG', 'ZON']

# loop through each zeolite code and download its CIF file
for code in zeolite_codes:
    # create the URL for the CIF file
    cif_url = url + code + '.cif'

    # send a GET request to download the CIF file
    response = requests.get(cif_url)

    # save the CIF file to the current working directory
    with open(code + '.cif', 'wb') as f:
        f.write(response.content)

        
# loop through all CIF files in the current working directory
for i in glob.glob('*.cif'):
    # read in CIF file using pymatgen
    structure = Structure.from_file(i, frac_tolerance = 0)
    structure.merge_sites(0.1, mode='delete')
    #structure = structure.get_primitive_structure()
    species = [
        'species',
        'Si core 4.0000',
        'O core 0.86902',
        'O shel -2.86902',
    ]
    # Define potentials
    potentials = [
        'buck',
        'Si core O shel 1283.907 0.32052 10.66158 0.0 10.0',
        'buck',
        'O shel O shel 22764.0 0.149 27.88 0.0 10.0',
        'spring',
        'O shel 74.92',
        'three',
        'Si core O shel O shel 2.09724 109.47 1.9 1.9 3.5',
    ]

    
   # get primitive cell
    # structure = structure.from_file(file_path, frac_tolerance = 0)
    # structure.merge_sites(0.1, mode='delete')
    # structure = structure.get_primitive_structure()
    # check if the number of oxygen atoms is twice the number of silicon atoms
    num_oxygen = sum(1 for site in structure if site.specie.symbol == 'O')
    num_silicon = sum(1 for site in structure if site.specie.symbol == 'Si')
    if num_oxygen != 2 * num_silicon:
        continue
    
    
    # Generate GULP input file
    gulp_input_str = 'opti conp\n'
    gulp_input_str += 'cell\n'
    gulp_input_str += f'{structure.lattice.a} {structure.lattice.b} {structure.lattice.c} '
    gulp_input_str += f'{structure.lattice.alpha} {structure.lattice.beta} {structure.lattice.gamma}\n'
    gulp_input_str += 'frac\n'
    for site in structure:
        if site.specie.symbol in [f'Si', f'O']:
            frac_coords = [f'{coord:.6f}' for coord in site.frac_coords]
            gulp_input_str += f'{site.specie.symbol} core {frac_coords[0]} {frac_coords[1]} {frac_coords[2]}\n'
    for site in structure:
        if site.specie.symbol in [f'O']:
            frac_coords = [f'{coord:.6f}' for coord in site.frac_coords]
            gulp_input_str += f'{site.specie.symbol} shel {frac_coords[0]} {frac_coords[1]} {frac_coords[2]}\n'
    for specie in species:
        gulp_input_str += f'{specie}\n'
    for potential in potentials:
        gulp_input_str += f'{potential}\n'
    gulp_input_str += f'dump {i[0:3]}.gout\n'
    # Write the GULP input file
    with open(f'{i[0:3]}.gin', 'w') as fl:
        fl.write(gulp_input_str)
