from flask import Flask, render_template_string, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask import session
import os
from werkzeug.utils import secure_filename
import datetime

app = Flask(__name__, static_folder='./', static_url_path='')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.secret_key = "some_secret_key_for_flask_session"

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    profile_picture = db.Column(db.String(120), nullable=True)
    country = db.Column(db.String(100), nullable=True)
    sex = db.Column(db.String(10), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    
class News(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255), nullable=False)
    content = db.Column(db.Text, nullable=False)
    comments = db.relationship('Comment', backref='news', lazy=True)


class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    news_id = db.Column(db.Integer, db.ForeignKey('news.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref='comments')
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))
    country = db.Column(db.String(100), nullable=True)
    likes = db.relationship('Like', backref='comment', lazy=True)

class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    comments = db.relationship('Comment', backref='category', lazy=True)

class Like(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    comment_id = db.Column(db.Integer, db.ForeignKey('comment.id'), nullable=False)

welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 90vh;
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to yellow */
            margin-bottom: 20px;
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h2 class="main-message">Connection Forum</h2>
    <h2 class="secondary-message">Welcome Back!</h2>
    <p><a href="/register">Create an account</a></p>
    <p><a href="/login">Login</a></p>
</body>
</html>
"""

login_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="/login" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        <input type="submit" value="Login">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

register_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Create an account</h2>
    <form action="/register" method="post" enctype="multipart/form-data">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        Sex:      <input type="sex" name="sex" required><br>
        Age:      <input type="age" name="age" required><br>
        Picture: <input type="file" name="picture" required><br>
        
        Country: 
        <select name="country">
            {% for country in countries %}
                <option value="{{ country }}">{{ country }}</option>
            {% endfor %}
        </select>
        <br>
        <input type="submit" value="Register">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

countries = [
    "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", 
    "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", 
    "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", 
    "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", 
    "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "CÃ´te d'Ivoire", 
    "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", 
    "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", "Costa Rica", 
    "Croatia", "Cuba", "Cyprus", "Czechia", "Democratic Republic of the Congo", 
    "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", 
    "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", 
    "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", 
    "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", 
    "Guyana", "Haiti", "Holy See", "Honduras", "Hungary", "Iceland", "India", 
    "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", 
    "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", 
    "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", 
    "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", 
    "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", 
    "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", 
    "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", 
    "North Korea", "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Panama", 
    "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", 
    "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", 
    "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", 
    "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", 
    "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", 
    "South Sudan", "Spain", "Sri Lanka", "State of Palestine", "Sudan", "Suriname", 
    "Sweden", "Switzerland", "Syria", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", 
    "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", 
    "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", 
    "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
]

select_country_page = """
<!DOCTYPE html>
<html>
    <title>Select Country</title>
</head>
<body>
    <h2><a href="/forum/world_news">World News</a></h2>
    <h2>Select Country</h2>
    <ul>
        {% for country in countries %}
            <li><a href="/country/{{ country }}">{{ country }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>
"""

Users = """
<!DOCTYPE html>
<html>
<head>
    <title>Users</title>
</head>
<body>
    <h2>Users</h2>
    <ul>
        {% for user in users %}
            <li>{{ user.username }}</li>
        {% endfor %}
    </ul>
</body>
</html>
"""

country_options_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ country_name }} Options</title>
</head>
<body>
    <h2>Options for {{ country_name }}</h2>
    <ul>
        <li><a href="/country/{{ country_name }}/study">Study</a></li>
        <li><a href="/country/{{ country_name }}/travel">Travel</a></li>
        <li><a href="/country/{{ country_name }}/housing">Housing</a></li>
        <li><a href="/country/{{ country_name }}/jobs">Jobs</a></li>
        <li><a href="/country/{{ country_name }}/dating">Dating</a></li>
        <li><a href="/country/{{ country_name }}/concert">Concert</a></li>
        <li><a href="/country/{{ country_name }}/sport">Sport</a></li>
        <li><a href="/country/{{ country_name }}/marriage">Marriage</a></li>
        <li><a href="/country/{{ country_name }}/religion">Religion</a></li>
        <li><a href="/country/{{ country_name }}/games">Games</a></li>
        <li><a href="/country/{{ country_name }}/books">Books</a></li>
        <li><a href="/country/{{ country_name }}/politics">Politics</a></li>
    </ul>
</body>
</html>
"""

profile_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ user.username }}'s Profile</title>
</head>
<body>
    
    <a href="/profile-details/{{ user.id }}">My Profile</a>  
    <h3>Forums</h3>
    <ul>
       
        <li><a href="/select-country">Select Country</a></li>
    </ul>
</body>
</html>
"""

profile_details_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ user.username }}'s Details</title>
</head>
<body>
    <h2>Profile Details of {{ user.username }}</h2>
    {% if user.profile_picture %}
        <img src="{{ url_for('static', filename='uploads/' + user.profile_picture) }}" alt="Profile Picture" width="200">
    {% else %}
        <p>No profile picture uploaded.</p>
    {% endif %}
    <p>Username: {{ user.username }}</p>
    <p>Sex: {{ user.sex }}</p>
    <p>Age: {{ user.age }}</p>
    <p>Country: {{ user.country }}</p>
    <a href="/profile">Back to My Profile</a>
</body>
</html>
"""


@app.route('/')
def welcome():
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  
    return render_template_string(welcome_page, current_datetime=current_datetime) 

welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;  /* Changed from 90vh to 100vh for full viewport height */
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to a dark gray */
            margin-bottom: 20px;
            text-align: center;  /* Added to centralize text */
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
            text-align: center;  /* Added to centralize text */
        }
    </style>
</head>
<body>
    <div class="content-wrapper"> <!-- Wrapper to hold and centralize the content -->
        <h2 class="main-message">Connection Forum</h2>
        <h2 class="secondary-message">Welcome Back!</h2>
        <p><a href="/register">Create an account</a></p>
        <p><a href="/login">Login</a></p>
        <p>Current Date and Time: {{ current_datetime }}</p>
    </div>
</body>
</html>
"""

world_news_page = """
<!DOCTYPE html>
<html>
<head>
    <title>World News</title>
</head>
<body>
    <h2>World News</h2>
    <ul>
        {% for item in news %}
            <li><a href="/forum/world_news/{{ item.id }}">{{ item.title }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>
"""

news_detail_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ news.title }}</title>
</head>
<body>
    <h2>{{ news.title }}</h2>
    <p>{{ news.content|safe }}</p>
    <h3>Comments:</h3>
    <ul>
        {% for comment in comments %}
            <li>
                {{ comment.user.username }}: {{ comment.content }}
                <button onclick="location.href='/like_comment/{{ comment.id }}'">Like</button>
                ({{ comment.likes|length }} likes)
            </li>
        {% endfor %}
    </ul>
    <form method="post">
        <textarea name="comment" required></textarea>
        <input type="submit" value="Comment">
    </form>
</body>
</html>
"""



news_add_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Add News</title>
</head>
<body>
    <h2>Add World News</h2>
    <form action="/add_news" method="post">
        Title: <input type="text" name="title" required><br>
        Content: <textarea name="content" required></textarea><br>
        <input type="submit" value="Add News">
    </form>
</body>
</html>
"""

category_detail_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ country_name }} - {{ category_name }}</title>
</head>
<body>
    <h2>{{ country_name }} - {{ category_name }}</h2>
    <h3>Comments:</h3>
    <ul>
        {% if comments %}
            {% for comment in comments %}
                <li>
                <img src="{{ url_for('static', filename='uploads/' + comment.user.profile_picture) }}" width="30" alt="Profile Picture">
                {{ comment.user.username }}: {{ comment.content }}
                </li>
            {% endfor %}
        {% else %}
            <li>No comments for this category yet.</li>
        {% endif %}
    </ul>
    <form method="post">
        <textarea name="comment" required></textarea>
        <input type="submit" value="Comment">
    </form>
    <a href="{{ url_for('select_country') }}">Back to countries</a>
</body>
</html>

"""

edit_comment_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Edit Comment</title>
</head>
<body>
    <h2>Edit Comment</h2>
    <form method="post">
        <textarea name="content" required>{{ comment.content }}</textarea>
        <input type="submit" value="Edit Comment">
    </form>
</body>
</html>
"""

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        user = User.query.filter_by(username=username).first()

        password = request.form['password']

        if user and bcrypt.check_password_hash(user.password, password):
            session['user_id'] = user.id
            return redirect(url_for('profile'))
        else:
            flash('Invalid username or password.')
            return redirect(url_for('login'))

    return render_template_string(login_page)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        sex = request.form['sex']
        age = request.form['age']
        country = request.form['country']

        existing_user = User.query.filter_by(username=username).first()

        if existing_user:
            flash('Username already exists. Choose a different one.')
            return redirect(url_for('register'))

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        profile_picture_filename = None
        if 'picture' in request.files:
            file = request.files['picture']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                profile_picture_filename = filename

        user = User(username=username, password=hashed_password, profile_picture=profile_picture_filename, country=country, sex=sex, age=int(age))

        
        db.session.add(user)
        db.session.commit()
        
        flash('Account created successfully! You can now login.')
        return redirect(url_for('login'))

    return render_template_string(register_page, countries=countries)

@app.route('/select-country')
def select_country():
    return render_template_string(select_country_page, countries=countries)


@app.route('/country/<country_name>')
def country_detail(country_name):
    return render_template_string(country_options_page, country_name=country_name)

@app.route('/country/<country_name>/<option>')
def country_option_detail(country_name, option):
    return f"You selected {option} for {country_name}"

@app.route('/forum/world_news')
def world_news():
    news = News.query.all()
    return render_template_string(world_news_page, news=news)


@app.route('/forum/world_news/<int:news_id>', methods=['GET', 'POST'])
def news_detail(news_id):
    news_item = News.query.get_or_404(news_id)
    if request.method == 'POST':
        comment_content = request.form.get('comment')
        user_id = session.get('user_id')
        if not user_id:
            flash('Please login to comment.')
            return redirect(url_for('login'))
        new_comment = Comment(content=comment_content, news_id=news_id, user_id=user_id)
        db.session.add(new_comment)
        db.session.commit()
        flash('Comment added.')
    comments = Comment.query.filter_by(news_id=news_id).all()
    return render_template_string(news_detail_page, news=news_item, comments=comments)


@app.route('/profile')
def profile():
    user_id = session.get('user_id')
    if not user_id:
        flash('Please login to view your profile.')
        return redirect(url_for('login'))

    user = User.query.get(user_id)
    return render_template_string(profile_page, user=user, countries=countries)

@app.route('/profile-details/<int:user_id>')
def profile_details(user_id):
    user = User.query.get(user_id)
    if not user:
        flash('User not found.')
        return redirect(url_for('welcome'))
    return render_template_string(profile_details_page, user=user)


@app.route('/add_news', methods=['GET', 'POST'])
def add_news():
    
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']

        new_news = News(title=title, content=content)
        db.session.add(new_news)
        db.session.commit()
        flash('News added successfully!')
        return redirect(url_for('world_news'))

    return render_template_string(news_add_page)

def initialize_news():
    titles_contents = [
        ("Episode 15: Pop the ballon to eject the least attractive girl on the hunt games show", 
         "For more information; <a href='https://www.youtube.com/watch?v=fsEUAs9qfRQ' target='_blank'>Click here to watch on YouTube</a>."),
        ("Best of Messi",
         "For more information; <a href='https://www.youtube.com/watch?v=jV0PbW8fJKk' target='_blank'>Click here to watch on YouTube</a>."),
        ("Chelsea Football Club",
         "For more information; <a href='https://www.youtube.com/watch?v=kRtCCQm2deg' target='_blank'>Click here to watch on YouTube</a>."),
        ("What Can $100 Get in LAGOS, NIGERIA? (Africa's Craziest City)",
         "For more information; <a href='https://www.youtube.com/watch?v=OXIrIjQMB5c' target='_blank'>Click here to watch on YouTube</a>.")
    ]
    for title, content in titles_contents:
        existing_news = News.query.filter_by(title=title).first()
        if not existing_news:
            news_item = News(title=title, content=content)
            db.session.add(news_item)
    db.session.commit()
    
@app.route('/country/<country_name>/<category_name>', methods=['GET', 'POST'])
def country_category_detail(country_name, category_name):
    category = Category.query.filter_by(name=category_name).first()
    
    if not category:
        flash('Category not found.')
        return redirect(url_for('select_country'))

    if request.method == 'POST':
        comment_content = request.form.get('comment')
        user_id = session.get('user_id')
        if not user_id:
            flash('Please login to comment.')
            return redirect(url_for('login'))
        
        new_comment = Comment(content=comment_content, category_id=category.id, user_id=user_id, country=country_name)
        db.session.add(new_comment)
        db.session.commit()
        flash('Comment added.')

    comments = Comment.query.filter_by(category_id=category.id, country=country_name).all()
    
    return render_template_string(category_detail_page, country_name=country_name, category_name=category_name, comments=comments)


def initialize_categories():
    categories = ["Study", "Travel", "Housing", "Jobs", "Dating", "Concert", "Sport", "Marriage", "Religion", "Games", "Books", "Politics"]
    for cat in categories:
        existing_category = Category.query.filter_by(name=cat).first()
        if not existing_category:
            category_item = Category(name=cat)
            db.session.add(category_item)
    db.session.commit()

@app.route('/comment/edit/<int:comment_id>', methods=['GET', 'POST'])
def edit_comment(comment_id):
    comment = Comment.query.get(comment_id)
    if request.method == 'POST':
        comment.content = request.form.get('content')
        db.session.commit()
        flash('Comment edited successfully.')
        return redirect(url_for('world_news')) 
    return render_template_string(edit_comment_page, comment=comment)  

@app.route('/comment/delete/<int:comment_id>')
def delete_comment(comment_id):
    comment = Comment.query.get(comment_id)
    if session.get('user_id') != comment.user_id:
        flash('You do not have permission to delete this comment.')
        return redirect(url_for('world_news'))
    db.session.delete(comment)
    db.session.commit()
    flash('Comment deleted.')
    return redirect(url_for('world_news'))

@app.route('/like_comment/<int:comment_id>')
def like_comment(comment_id):
    user_id = session.get('user_id')
    if not user_id:
        flash('Please login to like a comment.')
        return redirect(url_for('login'))

    comment = Comment.query.get(comment_id)
    if not comment:
        flash('Comment not found.')
        return redirect(url_for('world_news'))

    # Check if the user has already liked this comment
    existing_like = Like.query.filter_by(user_id=user_id, comment_id=comment_id).first()
    if existing_like:
        flash('You have already liked this comment.')
        return redirect(url_for('news_detail', news_id=comment.news_id))

    new_like = Like(user_id=user_id, comment_id=comment_id)
    db.session.add(new_like)
    db.session.commit()
    flash('Comment liked.')
    return redirect(url_for('news_detail', news_id=comment.news_id))

with app.app_context():
    db.create_all()
    if not News.query.first():
        initialize_news()
    if not Category.query.first():
        initialize_categories()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)


