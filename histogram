from flask import Flask, render_template_string, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask import session
import os
from werkzeug.utils import secure_filename
import datetime

app = Flask(__name__, static_folder='./', static_url_path='')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.secret_key = "some_secret_key_for_flask_session"

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    profile_picture = db.Column(db.String(120), nullable=True)
    country = db.Column(db.String(100), nullable=True)
    sex = db.Column(db.String(10), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    
class News(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255), nullable=False)
    content = db.Column(db.Text, nullable=False)
    comments = db.relationship('Comment', backref='news', lazy=True)


class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    news_id = db.Column(db.Integer, db.ForeignKey('news.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref='comments')
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))

class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    comments = db.relationship('Comment', backref='category', lazy=True)


welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 90vh;
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to yellow */
            margin-bottom: 20px;
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h2 class="main-message">Connection Forum</h2>
    <h2 class="secondary-message">Welcome Back!</h2>
    <p><a href="/register">Create an account</a></p>
    <p><a href="/login">Login</a></p>
</body>
</html>
"""

login_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="/login" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        <input type="submit" value="Login">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

register_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Create an account</h2>
    <form action="/register" method="post" enctype="multipart/form-data">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        Sex:      <input type="sex" name="sex" required><br>
        Age:      <input type="age" name="age" required><br>
        Picture: <input type="file" name="picture" required><br>
        
        Country: 
        <select name="country">
            {% for country in countries %}
                <option value="{{ country }}">{{ country }}</option>
            {% endfor %}
        </select>
        <br>
        <input type="submit" value="Register">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

countries = [
    "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", 
    "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", 
    "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", 
    "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", 
    "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "CÃ´te d'Ivoire", 
    "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", 
    "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", "Costa Rica", 
    "Croatia", "Cuba", "Cyprus", "Czechia", "Democratic Republic of the Congo", 
    "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", 
    "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", 
    "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", 
    "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", 
    "Guyana", "Haiti", "Holy See", "Honduras", "Hungary", "Iceland", "India", 
    "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", 
    "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", 
    "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", 
    "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", 
    "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", 
    "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", 
    "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", 
    "North Korea", "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Panama", 
    "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", 
    "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", 
    "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", 
    "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", 
    "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", 
    "South Sudan", "Spain", "Sri Lanka", "State of Palestine", "Sudan", "Suriname", 
    "Sweden", "Switzerland", "Syria", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", 
    "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", 
    "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", 
    "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
]

select_country_page = """
<!DOCTYPE html>
<html>
    <title>Select Country</title>
</head>
<body>
    <h2><a href="/forum/world_news">World News</a></h2>
    <h2>Select Country</h2>
    <ul>
        {% for country in countries %}
            <li><a href="/country/{{ country }}">{{ country }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>
"""

Users = """
<!DOCTYPE html>
<html>
<head>
    <title>Users</title>
</head>
<body>
    <h2>Users</h2>
    <ul>
        {% for user in users %}
            <li>{{ user.username }}</li>
        {% endfor %}
    </ul>
</body>
</html>
"""

country_options_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ country_name }} Options</title>
</head>
<body>
    <h2>Options for {{ country_name }}</h2>
    <ul>
        <li><a href="/country/{{ country_name }}/study">Study</a></li>
        <li><a href="/country/{{ country_name }}/travel">Travel</a></li>
        <li><a href="/country/{{ country_name }}/housing">Housing</a></li>
        <li><a href="/country/{{ country_name }}/jobs">Jobs</a></li>
        <li><a href="/country/{{ country_name }}/dating">Dating</a></li>
        <li><a href="/country/{{ country_name }}/concert">Concert</a></li>
        <li><a href="/country/{{ country_name }}/sport">Sport</a></li>
        <li><a href="/country/{{ country_name }}/marriage">Marriage</a></li>
        <li><a href="/country/{{ country_name }}/religion">Religion</a></li>
        <li><a href="/country/{{ country_name }}/games">Games</a></li>
        <li><a href="/country/{{ country_name }}/books">Books</a></li>
        <li><a href="/country/{{ country_name }}/politics">Politics</a></li>
    </ul>
</body>
</html>
"""

profile_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ user.username }}'s Profile</title>
</head>
<body>
    
    <a href="/profile-details/{{ user.id }}">My Profile</a>  
    <h3>Forums</h3>
    <ul>
        <li><a href="/forum/world_news">World News</a></li>
        <li><a href="/select-country">Select Country</a></li>
    </ul>
</body>
</html>
"""

profile_details_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ user.username }}'s Details</title>
</head>
<body>
    <h2>Profile Details of {{ user.username }}</h2>
    {% if user.profile_picture %}
        <img src="{{ url_for('static', filename='uploads/' + user.profile_picture) }}" alt="Profile Picture" width="200">
    {% else %}
        <p>No profile picture uploaded.</p>
    {% endif %}
    <p>Username: {{ user.username }}</p>
    <p>Sex: {{ user.sex }}</p>
    <p>Age: {{ user.age }}</p>
    <p>Country: {{ user.country }}</p>
    <a href="/profile">Back to My Profile</a>
</body>
</html>
"""


@app.route('/')
def welcome():
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  
    return render_template_string(welcome_page, current_datetime=current_datetime) 

welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;  /* Changed from 90vh to 100vh for full viewport height */
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to a dark gray */
            margin-bottom: 20px;
            text-align: center;  /* Added to centralize text */
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
            text-align: center;  /* Added to centralize text */
        }
    </style>
</head>
<body>
    <div class="content-wrapper"> <!-- Wrapper to hold and centralize the content -->
        <h2 class="main-message">Connection Forum</h2>
        <h2 class="secondary-message">Welcome Back!</h2>
        <p><a href="/register">Create an account</a></p>
        <p><a href="/login">Login</a></p>
        <p>Current Date and Time: {{ current_datetime }}</p>
    </div>
</body>
</html>
"""

world_news_page = """
<!DOCTYPE html>
<html>
<head>
    <title>World News</title>
</head>
<body>
    <h2>World News</h2>
    <ul>
        {% for item in news %}
            <li><a href="/forum/world_news/{{ item.id }}">{{ item.title }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>
"""

news_detail_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ news.title }}</title>
</head>
<body>
    <h2>{{ news.title }}</h2>
    <p>{{ news.content }}</p>
    <h3>Comments:</h3>
    <ul>
        {% for comment in comments %}
            <li>{{ comment.user.username }}: {{ comment.content }}</li>
        {% endfor %}
    </ul>
    <form method="post">
        <textarea name="comment" required></textarea>
        <input type="submit" value="Comment">
    </form>
</body>
</html>
"""

news_add_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Add News</title>
</head>
<body>
    <h2>Add World News</h2>
    <form action="/add_news" method="post">
        Title: <input type="text" name="title" required><br>
        Content: <textarea name="content" required></textarea><br>
        <input type="submit" value="Add News">
    </form>
</body>
</html>
"""

category_detail_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ country_name }} - {{ category_name }}</title>
</head>
<body>
    <h2>{{ country_name }} - {{ category_name }}</h2>
    <h3>Comments:</h3>
    <ul>
        {% if comments %}
            {% for comment in comments %}
                <li>
                <img src="{{ url_for('static', filename='uploads/' + comment.user.profile_picture) }}" width="30" alt="Profile Picture">
                {{ comment.user.username }}: {{ comment.content }}
                </li>
            {% endfor %}
        {% else %}
            <li>No comments for this category yet.</li>
        {% endif %}
    </ul>
    <form method="post">
        <textarea name="comment" required></textarea>
        <input type="submit" value="Comment">
    </form>
    <a href="{{ url_for('select_country') }}">Back to countries</a>
</body>
</html>
"""


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        user = User.query.filter_by(username=username).first()

        password = request.form['password']

        if user and bcrypt.check_password_hash(user.password, password):
            session['user_id'] = user.id
            return redirect(url_for('profile'))
        else:
            flash('Invalid username or password.')
            return redirect(url_for('login'))

    return render_template_string(login_page)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        sex = request.form['sex']
        age = request.form['age']
        country = request.form['country']

        existing_user = User.query.filter_by(username=username).first()

        if existing_user:
            flash('Username already exists. Choose a different one.')
            return redirect(url_for('register'))

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        profile_picture_filename = None
        if 'picture' in request.files:
            file = request.files['picture']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                profile_picture_filename = filename

        user = User(username=username, password=hashed_password, profile_picture=profile_picture_filename, country=country, sex=sex, age=int(age))

        
        db.session.add(user)
        db.session.commit()
        
        flash('Account created successfully! You can now login.')
        return redirect(url_for('login'))

    return render_template_string(register_page, countries=countries)

@app.route('/select-country')
def select_country():
    return render_template_string(select_country_page, countries=countries)


@app.route('/country/<country_name>')
def country_detail(country_name):
    return render_template_string(country_options_page, country_name=country_name)

@app.route('/country/<country_name>/<option>')
def country_option_detail(country_name, option):
    return f"You selected {option} for {country_name}"

@app.route('/forum/world_news')
def world_news():
    news = News.query.all()
    return render_template_string(world_news_page, news=news)


@app.route('/forum/world_news/<int:news_id>', methods=['GET', 'POST'])
def news_detail(news_id):
    news_item = News.query.get_or_404(news_id)
    if request.method == 'POST':
        comment_content = request.form.get('comment')
        user_id = session.get('user_id')
        if not user_id:
            flash('Please login to comment.')
            return redirect(url_for('login'))
        new_comment = Comment(content=comment_content, news_id=news_id, user_id=user_id)
        db.session.add(new_comment)
        db.session.commit()
        flash('Comment added.')
    comments = Comment.query.filter_by(news_id=news_id).all()
    return render_template_string(news_detail_page, news=news_item, comments=comments)


@app.route('/profile')
def profile():
    user_id = session.get('user_id')
    if not user_id:
        flash('Please login to view your profile.')
        return redirect(url_for('login'))

    user = User.query.get(user_id)
    return render_template_string(profile_page, user=user, countries=countries)

@app.route('/profile-details/<int:user_id>')
def profile_details(user_id):
    user = User.query.get(user_id)
    if not user:
        flash('User not found.')
        return redirect(url_for('welcome'))
    return render_template_string(profile_details_page, user=user)


@app.route('/add_news', methods=['GET', 'POST'])
def add_news():
    
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']

        new_news = News(title=title, content=content)
        db.session.add(new_news)
        db.session.commit()
        flash('News added successfully!')
        return redirect(url_for('world_news'))

    return render_template_string(news_add_page)

def initialize_news():
    titles_contents = [
        ("FG Outlaws Black Market FOREX Transactions", "The Presidential Fiscal Policy and Tax Reforms Committee was set up by President Bola Ahmed Tinubu to review and advise on reforms to shape Nigeria's fiscal policy and tax system. The Committeeâs terms of reference covers Fiscal Governance; Revenue Transformation and Economic Growth Facilitation. The work of the committee is further divided into 3 phases, being Quick Wins within 30 days; Critical Reforms within 6 months and Implementation within 1 year."),
        ("'My Wife Constantly Denies Me Sex'", "I have been married for a little under 2 years. During out courtship, my wife and I were very intimate. Later on, she became pregnant and we welcomed a child but since then, our sex live has never recovered till date. My wife is currently pregnant but the denial didn't start today. She does everything possible to prevent us from having sex, from laying our child on our bed instead of the court to cleaning or watching movies in the lounge room whenever I am in the room, she will then reenter the bedroom when i am asleep. The last time, she said that I don't do enough to get her arose and that if I want sex I have to earn it. She suggested that I have to start in the morning by being nice to her so when it's night, I would have been able to get her arose. I work an average of two shifts everyday, and sleep at home maybe 3 nights a week so I can pay our mortgage and other bills as she barely works due to having to look after our child."),
        ("Nigerian Woman Found Dead In Her Home In Baltimore, USA", "Nigerian woman found decomposed in her home in the U.S.A two weeks after she passed away and no one knew about it. A Nigerian woman identified as Uju Onyeyili died in the U.S.A and no one knew for over a week until neighbours raised alarm about a foul smell coming from her apartment in Baltimore, Maryland, USA. It is reported that Uju from Abatete in Anambra State, reportedly had an acc#dent two weeks ago, and she is said to have gone home after abandoning her car at the scene. Neighbours then reported to the police after noticing a foul smell coming from Uju's apartment. They also reported that they had not seen her in a week and she needed to tow her car that was involved in the accident. Police investigated and found her decomposing body at her home. Unfortunately, no close relative of hers could be reached in the U.S,, so her photo was shared online as the police asked family members to pick up her corpse or it would be disposed of by the state. Onyeyili, a member of the Brotherhood of the Cross and Star (Olumba Olumba Oba), was eventually buried by the sect in the U.S")
    ]
    for title, content in titles_contents:
        existing_news = News.query.filter_by(title=title).first()
        if not existing_news:
            news_item = News(title=title, content=content)
            db.session.add(news_item)
    db.session.commit()
    
@app.route('/country/<country_name>/<category_name>', methods=['GET', 'POST'])
def country_category_detail(country_name, category_name):
    category = Category.query.filter_by(name=category_name).first()
    
    if not category:
        print(f"Category {category_name} not found in the database!")
        flash('Category not found.')
        return redirect(url_for('select_country'))

    
    if request.method == 'POST':
        comment_content = request.form.get('comment')
        user_id = session.get('user_id')
        if not user_id:
            flash('Please login to comment.')
            return redirect(url_for('login'))
        
        new_comment = Comment(content=comment_content, category_id=category.id, user_id=user_id)
        db.session.add(new_comment)
        db.session.commit()
        flash('Comment added.')

    comments = Comment.query.filter_by(category_id=category.id).all()
    
    return render_template_string(category_detail_page, country_name=country_name, category_name=category_name, comments=comments)


def initialize_categories():
    categories = ["Study", "Travel", "Housing", "Jobs", "Dating", "Concert", "Sport", "Marriage", "Religion", "Games", "Books", "Politics"]
    for cat in categories:
        existing_category = Category.query.filter_by(name=cat).first()
        if not existing_category:
            category_item = Category(name=cat)
            db.session.add(category_item)
    db.session.commit()

@app.route('/comment/edit/<int:comment_id>', methods=['GET', 'POST'])
def edit_comment(comment_id):
    comment = Comment.query.get(comment_id)
    if request.method == 'POST':
        comment.content = request.form.get('content')
        db.session.commit()
        flash('Comment edited successfully.')
        return redirect(...) 
    return render_template_string(edit_comment_page, comment=comment)

@app.route('/comment/delete/<int:comment_id>')
def delete_comment(comment_id):
    comment = Comment.query.get(comment_id)
    db.session.delete(comment)
    db.session.commit()
    flash('Comment deleted.')
    return redirect(...) 

with app.app_context():
    db.create_all()
    initialize_news()
    initialize_categories()


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)


