from flask import Flask, render_template_string, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask import session
import os
from werkzeug.utils import secure_filename
import datetime

app = Flask(__name__, static_folder='./', static_url_path='')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.secret_key = "some_secret_key_for_flask_session"

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    profile_picture = db.Column(db.String(120), nullable=True)
    country = db.Column(db.String(100), nullable=True)
    sex = db.Column(db.String(10), nullable=False)
    age = db.Column(db.Integer, nullable=False)

with app.app_context():
    db.create_all()

welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 90vh;
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to yellow */
            margin-bottom: 20px;
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h2 class="main-message">Connection Forum</h2>
    <h2 class="secondary-message">Welcome Back!</h2>
    <p><a href="/register">Create an account</a></p>
    <p><a href="/login">Login</a></p>
</body>
</html>
"""

login_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="/login" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        <input type="submit" value="Login">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

register_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Create an account</h2>
    <form action="/register" method="post" enctype="multipart/form-data">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        Sex:      <input type="sex" name="sex" required><br>
        Age:      <input type="age" name="age" required><br>
        Picture: <input type="file" name="picture" required><br>
        
        Country: 
        <select name="country">
            {% for country in countries %}
                <option value="{{ country }}">{{ country }}</option>
            {% endfor %}
        </select>
        <br>
        <input type="submit" value="Register">
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
"""

countries = [
    "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", 
    "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", 
    "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", 
    "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", 
    "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "CÃ´te d'Ivoire", 
    "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", 
    "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", "Costa Rica", 
    "Croatia", "Cuba", "Cyprus", "Czechia", "Democratic Republic of the Congo", 
    "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", 
    "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", 
    "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", 
    "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", 
    "Guyana", "Haiti", "Holy See", "Honduras", "Hungary", "Iceland", "India", 
    "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", 
    "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", 
    "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", 
    "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", 
    "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", 
    "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", 
    "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", 
    "North Korea", "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Panama", 
    "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", 
    "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", 
    "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", 
    "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", 
    "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", 
    "South Sudan", "Spain", "Sri Lanka", "State of Palestine", "Sudan", "Suriname", 
    "Sweden", "Switzerland", "Syria", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", 
    "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", 
    "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", 
    "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
]

select_country_page = """
<!DOCTYPE html>
<html>
    <title>Select Country</title>
</head>
<body>
    <h2><a href="/forum/world_news">World News</a></h2>
    <h2>Select Country</h2>
    <ul>
        {% for country in countries %}
            <li><a href="/country/{{ country }}">{{ country }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>
"""

Users = """
<!DOCTYPE html>
<html>
<head>
    <title>Users</title>
</head>
<body>
    <h2>Users</h2>
    <ul>
        {% for user in users %}
            <li>{{ user.username }}</li>
        {% endfor %}
    </ul>
</body>
</html>
"""

country_options_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ country_name }} Options</title>
</head>
<body>
    <h2>Options for {{ country_name }}</h2>
    <ul>
        <li><a href="/country/{{ country_name }}/study">Study</a></li>
        <li><a href="/country/{{ country_name }}/travel">Travel</a></li>
        <li><a href="/country/{{ country_name }}/housing">Housing</a></li>
        <li><a href="/country/{{ country_name }}/jobs">Jobs</a></li>
        <li><a href="/country/{{ country_name }}/dating">Dating</a></li>
        <li><a href="/country/{{ country_name }}/concert">Concert</a></li>
        <li><a href="/country/{{ country_name }}/sport">Sport</a></li>
        <li><a href="/country/{{ country_name }}/marriage">Marriage</a></li>
        <li><a href="/country/{{ country_name }}/religion">Religion</a></li>
        <li><a href="/country/{{ country_name }}/games">Games</a></li>
        <li><a href="/country/{{ country_name }}/books">Books</a></li>
        <li><a href="/country/{{ country_name }}/politics">Politics</a></li>
    </ul>
</body>
</html>
"""

profile_page = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ user.username }}'s Profile</title>
</head>
<body>
    <h2>Profile</h2>
    <p>Username: {{ user.username }}</p>
    <p>Sex: {{ user.sex }}</p>
    <p>Age: {{ user.age }}</p>
    <p>Country: {{ user.country }}</p>
    {% if user.profile_picture %}
    <img src="{{ user.profile_picture }}" alt="Profile Picture" width="200">
    {% endif %}
    <h3>Forums</h3>
    <ul>
        <li><a href="/forum/world_news">World News</a></li>
        <li><a href="/select-country">Select Country</a></li>
    </ul>
</body>
</html>
"""

@app.route('/')
def welcome():
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  
    return render_template_string(welcome_page, current_datetime=current_datetime) 

welcome_page = """
<!DOCTYPE html>
<html>
<head>
    <title>Welcome</title>
    <style>
        /* Style for the entire body to center content */
        body {
            font-family: Arial, sans-serif;
            height: 100vh;  /* Changed from 90vh to 100vh for full viewport height */
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #f4f4f4;  /* Optional: added a light background color */
            background-image: url('/frontpage.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        /* Style for the main message */
        h2.main-message {
            font-size: 3em;
            color: #333;  /* Optional: changed the color to a dark gray */
            margin-bottom: 20px;
            text-align: center;  /* Added to centralize text */
        }
        
        /* Style for the secondary message */
        h2.secondary-message {
            margin-bottom: 10px;
            text-align: center;  /* Added to centralize text */
        }
    </style>
</head>
<body>
    <div class="content-wrapper"> <!-- Wrapper to hold and centralize the content -->
        <h2 class="main-message">Connection Forum</h2>
        <h2 class="secondary-message">Welcome Back!</h2>
        <p><a href="/register">Create an account</a></p>
        <p><a href="/login">Login</a></p>
        <p>Current Date and Time: {{ current_datetime }}</p>
    </div>
</body>
</html>
"""

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Assuming you have logic here to get the user based on the provided username
        username = request.form['username']
        user = User.query.filter_by(username=username).first()

        password = request.form['password']

        if user and bcrypt.check_password_hash(user.password, password):
            session['user_id'] = user.id
            return redirect(url_for('profile'))
        else:
            flash('Invalid username or password.')
            return redirect(url_for('login'))

    return render_template_string(login_page)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        sex = request.form['sex']
        age = request.form['age']
        country = request.form['country']

        existing_user = User.query.filter_by(username=username).first()

        if existing_user:
            flash('Username already exists. Choose a different one.')
            return redirect(url_for('register'))

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        profile_picture_filename = None
        if 'picture' in request.files:
            file = request.files['picture']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                profile_picture_filename = filename

        user = User(username=username, password=hashed_password, profile_picture=profile_picture_filename, country=country, sex=sex, age=int(age))

        
        db.session.add(user)
        db.session.commit()
        
        flash('Account created successfully! You can now login.')
        return redirect(url_for('login'))

    return render_template_string(register_page, countries=countries)

@app.route('/select-country')
def select_country():
    return render_template_string(select_country_page, countries=countries)


@app.route('/country/<country_name>')
def country_detail(country_name):
    return render_template_string(country_options_page, country_name=country_name)

@app.route('/country/<country_name>/<option>')
def country_option_detail(country_name, option):
    return f"You selected {option} for {country_name}"

@app.route('/forum/world_news')
def world_news():
    return "Welcome World News!"

@app.route('/profile')
def profile():
    user_id = session.get('user_id')
    if not user_id:
        flash('Please login to view your profile.')
        return redirect(url_for('login'))

    user = User.query.get(user_id)
    return render_template_string(profile_page, user=user, countries=countries)



if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=8080, debug=True)





