from sympy import symbols, Eq, solve, sqrt
import numpy as np
from pymatgen.core.structure import Structure

# Define the symbols
x, y, z = symbols('x y z')
# Determine coordinates of hydrogen atom
Coordinates_of_hydrogen = np.array([x,y,z])

# Function to find atom indices
def find_atom_indices(structure, atom1="Al", atom2="O"):
    atom1_idx, atom2_indices = None, []
    for idx, site in enumerate(structure):
        if site.species_string == atom1:
            atom1_idx = idx
        elif site.species_string == atom2:
            atom2_indices.append(idx)
    return atom1_idx, atom2_indices

# Function to calculate vectors
def calculate_vectors(structure, atom1_idx, atom2_indices):
    atom1_coord = structure[atom1_idx].coords
    atom2_coords = np.array([structure[i].coords for i in atom2_indices])
    distances = np.linalg.norm(atom2_coords - atom1_coord, axis=1)
    closest_indices = np.argsort(distances)[:2]
    return atom1_coord, atom2_coords, closest_indices

# Get atom indices
aluminum_idx, oxygen_indices = find_atom_indices(s)

# Calculate vectors
aluminum_coord, oxygen_coords, closest_indices = calculate_vectors(s, aluminum_idx, oxygen_indices)

# Determine coordinates of closest and second closest oxygen atoms
closest_oxygen_coord = oxygen_coords[closest_indices[0]]
second_closest_oxygen_coord = oxygen_coords[closest_indices[1]]

# Calculate midpoint between the closest oxygen atom and aluminum
a = 0.5
midpoint = (1 - a) * aluminum_coord + a * closest_oxygen_coord

# Compute vectors from the aluminum atom to the closest and second closest oxygen atoms
vector_al_o1 = closest_oxygen_coord - aluminum_coord
vector_al_o2 = second_closest_oxygen_coord - aluminum_coord

# Compute normal vector
normal_vector = np.cross(vector_al_o1, vector_al_o2)
normal_vector = normal_vector/np.linalg.norm(normal_vector)

vector_midpoint_Coordinates_of_hydrogen = Coordinates_of_hydrogen - midpoint


dot_of_vector_al_o1_and_vector_midpoint_Coordinates_of_hydrogen = np.dot(vector_al_o1, vector_midpoint_Coordinates_of_hydrogen)


dot_of_vector_midpoint_Coordinates_of_hydrogen_and_normal_vector = np.dot(vector_midpoint_Coordinates_of_hydrogen, normal_vector)


b = 1
# Compute vectors
vector_midpoint_Coordinates_of_hydrogen = Coordinates_of_hydrogen - midpoint

dot_of_vector_al_o1_and_vector_midpoint_Coordinates_of_hydrogen = np.dot(vector_al_o1, vector_midpoint_Coordinates_of_hydrogen)

dot_of_vector_midpoint_Coordinates_of_hydrogen_and_normal_vector = np.dot(vector_midpoint_Coordinates_of_hydrogen, normal_vector)


# Define the equations
eq1 = Eq(dot_of_vector_al_o1_and_vector_midpoint_Coordinates_of_hydrogen, 0)
eq2 = Eq(dot_of_vector_midpoint_Coordinates_of_hydrogen_and_normal_vector, 0)
eq3 = Eq((Coordinates_of_hydrogen[0] - midpoint[0])**2 + (Coordinates_of_hydrogen[1] - midpoint[1])**2 + (Coordinates_of_hydrogen[2] - midpoint[2])**2, 1**2)
#print(eq3)

sol = solve((eq1,eq2,eq3), (x, y, z))
first_solution = sol[0]
print(first_solution)

# Define coordinates for Hydrogen
hydrogen_coords = np.array([first_solution[0], first_solution[1], first_solution[2]])

# Update the structure with the hydrogen atom
s.append("H", hydrogen_coords, coords_are_cartesian=True)
print(s)




import os

# Path to the directory where the gin files are located
path = "/project/wen/emmanuel/gulp/1"
os.chdir(path)

# Create a file that contains a list of all .gin files and count them
gin_files = [f for f in os.listdir() if f.endswith('.gin')]
num_gin_files = len(gin_files)

with open('gin_file_list.txt', 'w') as list_file:
    for input_file in gin_files:
        list_file.write(input_file + '\n')

# Create the contents of the job array submission script
submit_script = f"""#!/bin/bash
#SBATCH --job-name=gulp_array
#SBATCH --output=%A_%a.out
#SBATCH --error=%A_%a.err
#SBATCH --array=1-{num_gin_files}
#SBATCH --time=16:00:00
#SBATCH -N 1
#SBATCH -n 1
#SBATCH --mem-per-cpu=3G

# Read the input file name from the gin_file_list.txt based on the array index
input_file=$(sed -n "${{SLURM_ARRAY_TASK_ID}}p" gin_file_list.txt)

# Create the directory to save the files
output_dir="${{input_file%%.*}}"
mkdir -p "$output_dir"

# Move the input file to its directory
mv "$input_file" "$output_dir/"

# Run gulp
cd "$output_dir"
gulp < "$input_file"

# Move the .gout file to the output directory (assuming gulp generates a .gout file with the same name as the input file)
mv "${{input_file%%.*}}.gout" "$output_dir/"

cd ..

# Rename and move the output and error files to the respective directory
mv "${{SLURM_ARRAY_JOB_ID}}_${{SLURM_ARRAY_TASK_ID}}.out" "$output_dir/${{output_dir}}.out"
mv "${{SLURM_ARRAY_JOB_ID}}_${{SLURM_ARRAY_TASK_ID}}.err" "$output_dir/${{output_dir}}.err"
"""

# Write the submission script to a file
with open("submit_job_array.sh", 'w') as f:
    f.write(submit_script)

# Inform the user to manually submit the job array
print("Job array script created. Submit it using: sbatch submit_job_array.sh")

#save as submit_job_array.sh
#mv submit_job_array.sh create_job_array.py
#python ./create_job_array.py
#sbatch submit_job_array.sh







